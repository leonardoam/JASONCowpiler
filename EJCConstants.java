/* Generated By:JavaCC: Do not edit this line. EJCConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface EJCConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int EOL = 7;
  /** RegularExpression Id. */
  int PLUS = 8;
  /** RegularExpression Id. */
  int MINUS = 9;
  /** RegularExpression Id. */
  int DIV = 10;
  /** RegularExpression Id. */
  int MUL = 11;
  /** RegularExpression Id. */
  int OR = 12;
  /** RegularExpression Id. */
  int AND = 13;
  /** RegularExpression Id. */
  int NOT = 14;
  /** RegularExpression Id. */
  int GT = 15;
  /** RegularExpression Id. */
  int LT = 16;
  /** RegularExpression Id. */
  int GTE = 17;
  /** RegularExpression Id. */
  int LTE = 18;
  /** RegularExpression Id. */
  int EQUAL = 19;
  /** RegularExpression Id. */
  int DIFF = 20;
  /** RegularExpression Id. */
  int SPEC_CHAR = 21;
  /** RegularExpression Id. */
  int LPAR = 22;
  /** RegularExpression Id. */
  int RPAR = 23;
  /** RegularExpression Id. */
  int SEMICOLON = 24;
  /** RegularExpression Id. */
  int COMMA = 25;
  /** RegularExpression Id. */
  int LSQ_BRACK = 26;
  /** RegularExpression Id. */
  int RSQ_BRACK = 27;
  /** RegularExpression Id. */
  int DOT = 28;
  /** RegularExpression Id. */
  int ARRAY = 29;
  /** RegularExpression Id. */
  int BEGIN = 30;
  /** RegularExpression Id. */
  int CALL = 31;
  /** RegularExpression Id. */
  int DO = 32;
  /** RegularExpression Id. */
  int ELSE = 33;
  /** RegularExpression Id. */
  int END = 34;
  /** RegularExpression Id. */
  int ENDIF = 35;
  /** RegularExpression Id. */
  int ENDUNTIL = 36;
  /** RegularExpression Id. */
  int ENDWHILE = 37;
  /** RegularExpression Id. */
  int FUNCTION = 38;
  /** RegularExpression Id. */
  int IF = 39;
  /** RegularExpression Id. */
  int INTEGER = 40;
  /** RegularExpression Id. */
  int PARAMETERS = 41;
  /** RegularExpression Id. */
  int PROCEDURE = 42;
  /** RegularExpression Id. */
  int PROGRAM = 43;
  /** RegularExpression Id. */
  int READ = 44;
  /** RegularExpression Id. */
  int REAL = 45;
  /** RegularExpression Id. */
  int RECORD = 46;
  /** RegularExpression Id. */
  int RETURN = 47;
  /** RegularExpression Id. */
  int RETURNS = 48;
  /** RegularExpression Id. */
  int SET = 49;
  /** RegularExpression Id. */
  int STRING = 50;
  /** RegularExpression Id. */
  int THEN = 51;
  /** RegularExpression Id. */
  int TYPES = 52;
  /** RegularExpression Id. */
  int UNTIL = 53;
  /** RegularExpression Id. */
  int VAR = 54;
  /** RegularExpression Id. */
  int VARIABLES = 55;
  /** RegularExpression Id. */
  int WHILE = 56;
  /** RegularExpression Id. */
  int WRITE = 57;
  /** RegularExpression Id. */
  int DIGIT = 58;
  /** RegularExpression Id. */
  int LETTER = 59;
  /** RegularExpression Id. */
  int SYMBOL = 60;
  /** RegularExpression Id. */
  int DIGITS = 61;
  /** RegularExpression Id. */
  int FORCE_DIGITS = 62;
  /** RegularExpression Id. */
  int NUMERIC_LITERAL = 63;
  /** RegularExpression Id. */
  int CHARACTER = 64;
  /** RegularExpression Id. */
  int IDENTIFIER = 65;
  /** RegularExpression Id. */
  int ANY_CHARACTER = 66;
  /** RegularExpression Id. */
  int STRING_LITERAL = 67;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\r\\n\"",
    "<token of kind 6>",
    "<EOL>",
    "\"+\"",
    "\"-\"",
    "\"/\"",
    "\"*\"",
    "\"\\\\\"",
    "\"&\"",
    "\"~\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\"=\"",
    "\"!\"",
    "<SPEC_CHAR>",
    "\"(\"",
    "\")\"",
    "\";\"",
    "\",\"",
    "\"[\"",
    "\"]\"",
    "\".\"",
    "\"array\"",
    "\"begin\"",
    "\"call\"",
    "\"do\"",
    "\"else\"",
    "\"end\"",
    "\"endif\"",
    "\"enduntil\"",
    "\"endwhile\"",
    "\"function\"",
    "\"if\"",
    "\"integer\"",
    "\"parameters\"",
    "\"procedure\"",
    "\"program\"",
    "\"read\"",
    "\"real\"",
    "\"record\"",
    "\"return\"",
    "\"returns\"",
    "\"set\"",
    "\"string\"",
    "\"then\"",
    "\"types\"",
    "\"until\"",
    "\"var\"",
    "\"variables\"",
    "\"while\"",
    "\"write\"",
    "<DIGIT>",
    "<LETTER>",
    "<SYMBOL>",
    "<DIGITS>",
    "<FORCE_DIGITS>",
    "<NUMERIC_LITERAL>",
    "<CHARACTER>",
    "<IDENTIFIER>",
    "<ANY_CHARACTER>",
    "<STRING_LITERAL>",
  };

}
