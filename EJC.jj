/* Generated By:JavaCC: Do not edit this line. EJC.java */
import java.io.*;
import tadsemantico.*;

public class EJC implements EJCConstants {
        public final static SymbolTable st = new SymbolTable();
        public static int array_counter = 0;
        public static int record_counter = 0;

    public static void main(String[] args) throws ParseException, TokenMgrError{
        EJC EJC = new EJC(System.in);
        try{
            EJC.start();
            System.out.println("Sucesso!");
        }catch (Exception e) {
            //System.out.println("Erro!\n" + e.toString());
                        e.printStackTrace();
        }
    }

  static final public void start() throws ParseException {
    Program();
  }

//<Program> = <Header> <DeclSec> <Block>"."
  static final public void Program() throws ParseException {
    Header();
    DeclSec();
    Block();
    jj_consume_token(DOT);
                st.removeLevel();
  }

//<Header> = â€œprogramâ€? â€œidentifierâ€? â€œ;â€?
  static final public void Header() throws ParseException {
    jj_consume_token(PROGRAM);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(SEMICOLON);
  }

//<Block> = â€œbeginâ€? <Statements> â€œendâ€?
  static final public void Block() throws ParseException {
    jj_consume_token(BEGIN);
    Statements();
    jj_consume_token(END);
  }

//<DeclSec> = <TypeDeclSec> <VarDeclSec> <SubprogramDecls> 
  static final public void DeclSec() throws ParseException {
    TypeDeclSec();
    VarDeclSec();
    SubProgramDecls();
  }

//<TypeDeclSec> = [â€œtypesâ€? <TypeDecls>]
  static final public void TypeDeclSec() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPES:
      jj_consume_token(TYPES);
      TypeDecls();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
  }

//<TypeDecls> = <TypeDecl> {<TypeDecl>}
  static final public void TypeDecls() throws ParseException {
    TypeDecl();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      TypeDecl();
    }
  }

//<TypeDecl> = â€œidentifierâ€? <TypeSpecification>
  static final public void TypeDecl() throws ParseException {
        Token t;
    t = jj_consume_token(IDENTIFIER);
                String str = t.image.toString();
                if(!st.addSymbol(str, "TYPE")){
                        System.out.println("Erro semantico na linha "+t.beginLine+", coluna "+t.beginColumn+".\u005cn\u005ctTipo "+t.image.toString()+" ja foi definido nesse contexto.");
                }
    TypeSpecification(str);
  }

//<TypeSpecification> = <ArraySpecification> | <RecordSpecification>
  static final public void TypeSpecification(String typeName) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARRAY:
      ArraySpecification(typeName);
      break;
    case RECORD:
      RecordSpecification(typeName);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//<ArraySpecification> = â€œarrayâ€? <DataType> â€œ[â€? <NumericLiteral> â€?]â€? ";"
  static final public void ArraySpecification(String typeName) throws ParseException {
        Token t;
    jj_consume_token(ARRAY);
    t = DataType();
            String arrayName = "ARRAY"+array_counter;
                        st.addSymbol(arrayName, "ARRAY");
                        Symbol s = st.search(t.image.toString());
                        if(s == null || (!s.getTypeName().equals("TYPE") && !s.getTypeName().equals("REAL") && !s.getTypeName().equals("STRING") && !s.getTypeName().equals("INTEGER")))
                                //System.out.println("Erro semantico na linha "+t.beginLine+", coluna "+t.beginColumn+".\n\tTipo "+t.image.toString()+" nao definido.");
                        ;
            else{
                                st.search(arrayName).getType().set("ELEMTYPE", s);
                        }
            array_counter++;
    jj_consume_token(LSQ_BRACK);
    t = jj_consume_token(INT);
                //only if the array exists (check the code above!)
                int size = 0;
                try{
                        size = Integer.parseInt(t.image.toString());
                }catch(Exception e){
                }
                st.search(arrayName).getType().set("size", size);
                st.search(typeName).getType().set("ELEMTYPE", st.search(arrayName));
    jj_consume_token(RSQ_BRACK);
    jj_consume_token(SEMICOLON);
  }

//<RecordSpecification> = â€œrecordâ€? <VarDecls> â€œendâ€? â€œ;â€?
  static final public void RecordSpecification(String typeName) throws ParseException {
    jj_consume_token(RECORD);
            String recordName = "RECORD"+record_counter;
                        st.addSymbol(recordName, "RECORD");
    VarDecls(true);
                        record_counter++;
            st.search(typeName).getType().set("ELEMTYPE", st.search(recordName));
    jj_consume_token(END);
    jj_consume_token(SEMICOLON);
  }

//<VarDeclSec> = [â€œvariablesâ€? <VarDecls>]
  static final public void VarDeclSec() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLES:
      jj_consume_token(VARIABLES);
      VarDecls(false);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
  }

//<VarDecls> = <VarDecl> {<VarDecl>}
  static final public void VarDecls(boolean comingFromRecordSpec) throws ParseException {
    VarDecl(comingFromRecordSpec);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case REAL:
      case STRING:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      VarDecl(comingFromRecordSpec);
    }
  }

//<VarDecl> = <DataType> <IdList> â€œ;â€?
  static final public void VarDecl(boolean comingFromRecordSpec) throws ParseException {
        Token t;
    t = DataType();
    IdList(t, comingFromRecordSpec);
    jj_consume_token(SEMICOLON);
  }

//<DataType> = â€œrealâ€? | â€œintegerâ€? | <Identifier> | <String>
  static final public Token DataType() throws ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REAL:
      t = jj_consume_token(REAL);
      break;
    case INTEGER:
      t = jj_consume_token(INTEGER);
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                Symbol dt = st.search(t.image.toString());
                if(dt == null || (dt != null && !dt.getTypeName().equals("TYPE"))){
                        System.out.println("Erro semantico na linha "+t.beginLine+", coluna "+t.beginColumn+".\u005cn\u005ctTipo "+t.image.toString()+" nao esta definido.");
                }
      break;
    case STRING:
      t = jj_consume_token(STRING);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public void addRecordField(Token datatype, Token identifier, boolean comingFromRecordSpec) throws ParseException {
                if(comingFromRecordSpec){
                        if(st.search(datatype.image.toString()) != null){//certifica-se que tipo eh valido, mas nao precisa imprimir nada caso nao seja
                                boolean result = st.search("RECORD"+record_counter).getType().set(identifier.image.toString(), st.search(datatype.image.toString()));
                                if(!result){
                                        System.out.println("Erro semantico na linha "+identifier.beginLine+", coluna "+identifier.beginColumn+".\u005cn\u005ctCampo "+identifier.image.toString()+" duplicado.");
                                }
                        }
                }else if(st.isSet(identifier.image.toString())){
                        System.out.println("Erro semantico na linha "+identifier.beginLine+", coluna "+identifier.beginColumn+".\u005cn\u005ctIdentificador "+identifier.image.toString()+" duplicado.");
                }else{
                        st.addSymbol(identifier.image.toString(), "VARIABLE");
                        st.search(identifier.image.toString()).getType().set("ELEMTYPE", st.search(datatype.image.toString()));
                }
  }

//<IdList> = <Identifier> {â€œ,â€? <Identifier>}
  static final public void IdList(Token datatype, boolean comingFromRecordSpec) throws ParseException {
                Token t;
    t = jj_consume_token(IDENTIFIER);
                        addRecordField(datatype, t, comingFromRecordSpec);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      t = jj_consume_token(IDENTIFIER);
                                addRecordField(datatype, t, comingFromRecordSpec);
    }
  }

//<SubProgramDecls> = {<SubProgramDecl>}
  static final public void SubProgramDecls() throws ParseException {
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNCTION:
      case PROCEDURE:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      SubProgramDecl();
    }
  }

//<SubProgramDecl> = <ProcDecl> | <FunctionDecl>
  static final public void SubProgramDecl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PROCEDURE:
      ProcDecl();
      break;
    case FUNCTION:
      FunctionDecl();
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                st.removeLevel();
  }

//<ProcDecl> = <ProcHeader> <SubProgramDeclSec> <Block> â€œ;â€?
  static final public void ProcDecl() throws ParseException {
        String procName;
    procName = ProcHeader();
    SubProgramDeclSec(procName);
    Block();
    jj_consume_token(SEMICOLON);
  }

//<ProcHeader> = â€œprocedureâ€? <Identifier> â€œ;â€?
  static final public String ProcHeader() throws ParseException {
        Token t;
    jj_consume_token(PROCEDURE);
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(SEMICOLON);
                String procName = t.image.toString();
                if(!st.addSymbol(procName, "PROCEDURE")){
                        System.out.println("Erro semantico na linha "+t.beginLine+", coluna "+t.beginColumn+".\u005cn\u005ctIdentificador "+t.image.toString()+" ja foi definido nesse contexto.");
                }
                st.addLevel();
                {if (true) return procName;}
    throw new Error("Missing return statement in function");
  }

//<SubProgramDeclSec> = <ParamDeclSec> <DeclSec>
  static final public void SubProgramDeclSec(String subProgramName) throws ParseException {
        int nparams = 0;
    nparams = ParamDeclSec();
                st.search(st.getCurrentLevel()-1, subProgramName).getType().set("nparams", nparams);
    DeclSec();
  }

//<ParamDeclSec> = [â€œparametersâ€? <ParamDecls>]
  static final public int ParamDeclSec() throws ParseException {
        int nparams = 0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARAMETERS:
      jj_consume_token(PARAMETERS);
      nparams = ParamDecls();
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
                {if (true) return nparams;}
    throw new Error("Missing return statement in function");
  }

//<ParamDecls> = {<ParamDecl>}
  static final public int ParamDecls() throws ParseException {
        int nparams = 0;
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case REAL:
      case STRING:
      case VAR:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_5;
      }
      nparams = ParamDecl(nparams);
    }
                {if (true) return nparams;}
    throw new Error("Missing return statement in function");
  }

//<ParamDecl> =["var"] <DataType> <Identifier> ";"
  static final public int ParamDecl(int nparams) throws ParseException {
        Token datatype;
        Token identifier;
        String tClass = "VALUE";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      jj_consume_token(VAR);
                                tClass = "REFERENCE";
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    datatype = DataType();
    identifier = jj_consume_token(IDENTIFIER);
    jj_consume_token(SEMICOLON);
                if(!st.addSymbol(identifier.image.toString(), "PARAM")){
                        System.out.println("Erro semantico na linha "+identifier.beginLine+", coluna "+identifier.beginColumn+".\u005cn\u005ctIdentificador "+identifier.image.toString()+" ja foi definido nesse contexto.");
                }else{
                        Type t = st.search(identifier.image.toString()).getType();
                        t.set("ELEMTYPE", st.search(datatype.image.toString()));
                        t.set("TCLASS", tClass);
                }
                {if (true) return nparams+1;}
    throw new Error("Missing return statement in function");
  }

//<FunctionDecl> = <FunctionHeader> <SubProgramDeclSec> <FunctionBlock> â€œ;â€?
  static final public void FunctionDecl() throws ParseException {
        String funcName;
    funcName = FunctionHeader();
    SubProgramDeclSec(funcName);
    FunctionBlock();
    jj_consume_token(SEMICOLON);
  }

//<FunctionHeader> = â€œfunctionâ€? <Identifier> â€œreturnsâ€? <DataType>;
  static final public String FunctionHeader() throws ParseException {
        Token t;
        Token returnType;
    jj_consume_token(FUNCTION);
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(RETURNS);
    returnType = DataType();
    jj_consume_token(SEMICOLON);
                String funcName = t.image.toString();
                if(!st.addSymbol(funcName, "FUNCTION")){
                        System.out.println("Erro semantico na linha "+t.beginLine+", coluna "+t.beginColumn+".\u005cn\u005ctIdentificador "+t.image.toString()+" ja foi definido nesse contexto.");
                }else{
                        st.search(funcName).getType().set("RTYPE", st.search(returnType.image.toString()));
                }
                st.addLevel();
                {if (true) return funcName;}
    throw new Error("Missing return statement in function");
  }

//modificado pra resolver ambiguidade
//<FunctionBlock> = â€œbeginâ€? <SpecialStatements> â€œendâ€?
  static final public void FunctionBlock() throws ParseException {
    jj_consume_token(BEGIN);
    SpecialStatements();
    jj_consume_token(END);
  }

//<Statements> = <Statement> { â€œ;â€?<Statement>}
  static final public void Statements() throws ParseException {
    Statement();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_6;
      }
      jj_consume_token(SEMICOLON);
      Statement();
    }
  }

//criado para resolver a ambiguidade com ReturnStatement
//<SpecialStatements> = <Statement>â€œ;â€?{<Statement>â€œ;â€?}<ReturnStatement>
  static final public void SpecialStatements() throws ParseException {
    label_7:
    while (true) {
      Statement();
      jj_consume_token(SEMICOLON);
      if (jj_2_1(2)) {
        ;
      } else {
        break label_7;
      }
    }
    ReturnStatement();
  }

//<Statement> = [â€œreadâ€? <Variable> 
        //| â€œsetâ€? <Variable> â€œ=â€? <Expression> 
        //| â€œwriteâ€? <Variable>
        //| â€œifâ€? <Condition> â€œthenâ€? <Statements> <ElseClause>
        //| â€œwhileâ€? <Condition> â€œdoâ€? <Statements>  â€œendwhileâ€?
        //| â€œuntilâ€? <Condition> "do" <Statements> â€œenduntilâ€?
        //| â€œcallâ€? <IDENTIFIER> <ArgList> ]
  static final public void Statement() throws ParseException {
        Token t;
        int nparams;
        Symbol o = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CALL:
    case IF:
    case READ:
    case SET:
    case UNTIL:
    case WHILE:
    case WRITE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case READ:
        jj_consume_token(READ);
        Variable(false, o);
        break;
      case SET:
        jj_consume_token(SET);
        Variable(false, o);
        jj_consume_token(EQUAL);
        Expression();
        break;
      case WRITE:
        jj_consume_token(WRITE);
        Variable(false, o);
        break;
      case IF:
        jj_consume_token(IF);
        Condition();
        jj_consume_token(THEN);
        Statements();
        ElseClause();
        break;
      case WHILE:
        jj_consume_token(WHILE);
        Condition();
        jj_consume_token(DO);
        Statements();
        jj_consume_token(ENDWHILE);
        break;
      case UNTIL:
        jj_consume_token(UNTIL);
        Condition();
        jj_consume_token(DO);
        Statements();
        jj_consume_token(ENDUNTIL);
        break;
      case CALL:
        jj_consume_token(CALL);
        t = jj_consume_token(IDENTIFIER);
        nparams = ArgList();
                Symbol s = st.search(t.image.toString());
                if(s == null){
                        System.out.println("Erro semantico na linha "+t.beginLine+", coluna "+t.beginColumn+".\u005cn\u005ctProcedimento "+t.image.toString()+" nao foi definido.");
                }else if(!s.getTypeName().equals("PROCEDURE")){
                        System.out.println("Erro semantico na linha "+t.beginLine+", coluna "+t.beginColumn+".\u005cn\u005ct"+t.image.toString()+" nao eh um procedimento.");
                }else if(s.getType().get("NPARAMS") == null || !s.getType().get("NPARAMS").equals(nparams)){
                        System.out.println("Erro semantico na linha "+t.beginLine+", coluna "+t.beginColumn+".\u005cn\u005ctNumero de argumentos passados para o procedimento "+t.image.toString()+" eh diferente do esperado.");
                }
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
  }

//<ElseClause> = [â€œelseâ€? <Statements>] â€œendifâ€? 
  static final public void ElseClause() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      Statements();
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    jj_consume_token(ENDIF);
  }

//tiramos o ; como parte da resoluÃ§Ã£o da ambiguidade com statement
//<ReturnStatement> = â€œ;â€? â€œreturnâ€? â€œ(â€? <Condition> â€œ)â€?
  static final public void ReturnStatement() throws ParseException {
    jj_consume_token(RETURN);
    jj_consume_token(LPAR);
    Condition();
    jj_consume_token(RPAR);
  }

//<ArgList> = [â€œ(â€? <Arguments> â€œ)â€? ]
  static final public int ArgList() throws ParseException {
        int nparams = 0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
      jj_consume_token(LPAR);
      nparams = Arguments();
      jj_consume_token(RPAR);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
                {if (true) return nparams;}
    throw new Error("Missing return statement in function");
  }

//usado para resolver ambiguidade entre variable e chamada de funcao
//<ArgListSpecial> = â€œ(â€? <Arguments> â€œ)â€? 
  static final public int ArgListSpecial() throws ParseException {
        int nparams = 0;
    jj_consume_token(LPAR);
    nparams = Arguments();
    jj_consume_token(RPAR);
                {if (true) return nparams;}
    throw new Error("Missing return statement in function");
  }

//<Arguments> = <Argument> {â€œ,â€? <Argument>}
  static final public int Arguments() throws ParseException {
        int nparams = 0;
    Argument();
         nparams++;
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_8;
      }
      jj_consume_token(COMMA);
      Argument();
                                    nparams++;
    }
                {if (true) return nparams;}
    throw new Error("Missing return statement in function");
  }

//<Condition> = <CompoundCondition> {â€œ\â€? <CompoundCondition>}
  static final public void Condition() throws ParseException {
    CompoundCondition();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_9;
      }
      jj_consume_token(OR);
      CompoundCondition();
    }
  }

//<CompoundCondition> =<SimpleCondition> {â€œ&â€? <SimpleCondition>}
  static final public void CompoundCondition() throws ParseException {
    SimpleCondition();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_10;
      }
      jj_consume_token(AND);
      SimpleCondition();
    }
  }

//<SimpleCondition> = <Expression> [<RelOp> <Expression>] 
  static final public void SimpleCondition() throws ParseException {
    Expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GT:
    case LT:
    case GTE:
    case LTE:
    case EQUAL:
    case DIFF:
      RelOp();
      Expression();
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
  }

//<Expression> =  <Term> {<AddOp> <Term>} 
  static final public void Expression() throws ParseException {
    Term();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_11;
      }
      AddOp();
      Term();
    }
  }

//<Term> =  <Unary> {<MultiOP> <Unary>}
  static final public void Term() throws ParseException {
    Unary();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIV:
      case MUL:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_12;
      }
      MultOp();
      Unary();
    }
  }

//<Unary> = {(â€œ+â€? | â€?-â€?)} <Factor>
  static final public void Unary() throws ParseException {
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    Factor();
  }

//tambem modificado para remover ambiguidade entre variable e chamada de funcao
//<Factor> = <Identifier> <ArgListSpecial> | <NumericLiteral> | <StringLiteral> | â€œ~â€?<Factor> | â€œ(â€? <Condition> â€œ)â€? | <Variable>
  static final public void Factor() throws ParseException {
        Token t;
        int nparams = 0;
        Symbol o = null;
    if (jj_2_2(2)) {
      t = jj_consume_token(IDENTIFIER);
      nparams = ArgListSpecial();
                Symbol s = st.search(t.image.toString());
                if(s == null){
                        System.out.println("Erro semantico na linha "+t.beginLine+", coluna "+t.beginColumn+".\u005cn\u005ctFuncao "+t.image.toString()+" nao foi definida.");
                }else if(!s.getTypeName().equals("FUNCTION") && nparams > 0){
                        System.out.println("Erro semantico na linha "+t.beginLine+", coluna "+t.beginColumn+".\u005cn\u005ct"+t.image.toString()+" nao eh uma funcao.");
                }else if(s.getTypeName().equals("FUNCTION") && !s.getType().get("NPARAMS").equals(nparams)){
                        System.out.println("Erro semantico na linha "+t.beginLine+", coluna "+t.beginColumn+".\u005cn\u005ctNumero de argumentos passados para a funcao "+t.image.toString()+" eh diferente do esperado.");
                }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FLOAT:
        jj_consume_token(FLOAT);
        break;
      case INT:
        jj_consume_token(INT);
        break;
      case STRING_LITERAL:
        jj_consume_token(STRING_LITERAL);
        break;
      case NOT:
        jj_consume_token(NOT);
        Factor();
        break;
      case LPAR:
        jj_consume_token(LPAR);
        Condition();
        jj_consume_token(RPAR);
        break;
      case IDENTIFIER:
        Variable(false, o);
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

//<Variable> = <Identifier> [â€œ[â€? <Expression> â€œ]â€?]{â€œ.â€?<Variable>}
  static final public void Variable(boolean recursion, Symbol field) throws ParseException {
        Token t;
    t = jj_consume_token(IDENTIFIER);
                if(!recursion){//trata identificador inicial
                        Symbol s = st.search(t.image.toString());
                        field = s;

                        if(s == null){
                                System.out.println("Erro semantico na linha "+t.beginLine+", coluna "+t.beginColumn+".\u005cn\u005ct"+t.image.toString()+" nao foi definido.");
                        }else if(s.getType()){
                                System.out.println("Erro semantico na linha "+t.beginLine+", coluna "+t.beginColumn+".\u005cn\u005ctImpossivel acessar "+t.image.toString()+", erro na definicao.");
                                field = null;
                        }else{
                                field = (Symbol) s.getType().get("ELEMTYPE");//s eh do tipo Variable

                                while(field != null && (field.getTypeName().equals("TYPE") || field.getTypeName().equals("ARRAY"))){
                                        field = (Symbol) field.getType().get("ELEMTYPE");
                                }
                        }

                        if(s != null && !s.getTypeName().equals("VARIABLE") && !s.getTypeName().equals("PARAM") && !s.getTypeName().equals("FUNCTION")){
                                System.out.println("Erro semantico na linha "+t.beginLine+", coluna "+t.beginColumn+".\u005cn\u005ct"+t.image.toString()+" nao pode ser usado nesse contexto.\u005cn\u005ctEsperado:\u005cn\u005ctFuncao, parametro ou variavel.");
                        }else if(s != null && s.getTypeName().equals("FUNCTION") && !s.getType().get("NPARAMS").equals(0)){
                                System.out.println("Erro semantico na linha "+t.beginLine+", coluna "+t.beginColumn+".\u005cn\u005ctNumero de argumentos passados para a funcao "+t.image.toString()+" eh diferente do esperado.");
                        }
                }else{//trata campos
                        if(field == null){
                                System.out.println("Erro semantico na linha "+t.beginLine+", coluna "+t.beginColumn+".\u005cn\u005ctImpossivel acessar o campo "+t.image.toString()+" porque um ou mais campos anteriores nao foram definidos corretamente.");
                        }else if(!field.getTypeName().equals("RECORD") || field.getType().get(t.image.toString()) == null){
                                System.out.println("Erro semantico na linha "+t.beginLine+", coluna "+t.beginColumn+".\u005cn\u005ctCampo "+t.image.toString()+" nao foi definido.");
                                field = null;
                        }else{
                                field = (Symbol) field.getType().get(t.image.toString());

                                while(field != null && (field.getTypeName().equals("TYPE") || field.getTypeName().equals("ARRAY"))){
                                        field = (Symbol) field.getType().get("ELEMTYPE");
                                }
                        }
                }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LSQ_BRACK:
      jj_consume_token(LSQ_BRACK);
      Expression();
      jj_consume_token(RSQ_BRACK);
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    label_14:
    while (true) {
      if (jj_2_3(2)) {
        ;
      } else {
        break label_14;
      }
      jj_consume_token(DOT);
      Variable(true, field);
    }
  }

//<RelOp> = â€œ=â€? | â€œ!â€? | â€œ>â€? | â€œ<â€? | â€œ<=â€? | â€œ>=â€?
  static final public void RelOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      jj_consume_token(EQUAL);
      break;
    case DIFF:
      jj_consume_token(DIFF);
      break;
    default:
      jj_la1[27] = jj_gen;
      if (jj_2_4(2)) {
        jj_consume_token(GTE);
      } else if (jj_2_5(2)) {
        jj_consume_token(LTE);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GT:
          jj_consume_token(GT);
          break;
        case LT:
          jj_consume_token(LT);
          break;
        default:
          jj_la1[28] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

//<AddOp> = â€œ+â€? | â€œ-â€?
  static final public void AddOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//<MultOp> = â€œ*â€? | â€œ/â€?
  static final public void MultOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MUL:
      jj_consume_token(MUL);
      break;
    case DIV:
      jj_consume_token(DIV);
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//<Argument> = <Condition>
  static final public void Argument() throws ParseException {
    Condition();
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_3R_34() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(UNTIL)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(WRITE)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(READ)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(SET)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_scan_token(GTE)) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) return true;
    }
    return false;
  }

  static private boolean jj_3R_31() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_32()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_scan_token(LTE)) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(LPAR)) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_scan_token(LPAR)) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(CALL)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public EJCTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[31];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x10000000,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x0,0x0,0x800000,0x40000000,0x40000000,0x0,0x200000,0x1000000,0x1000,0x2000,0x1f8000,0x300,0xc00,0x300,0x300,0x204000,0x2000000,0x180000,0x18000,0x300,0xc00,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x80000,0x0,0x2000,0x400000,0x21080,0x21080,0x0,0x220,0x220,0x100,0x221080,0x200000,0x0,0x1910840,0x1910840,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0000000,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x2,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa,0x0,0x0,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[5];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public EJC(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public EJC(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new EJCTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public EJC(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new EJCTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public EJC(EJCTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(EJCTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[68];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 31; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 68; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 5; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
