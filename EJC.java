/* Generated By:JavaCC: Do not edit this line. EJC.java */
import java.io.*;

public class EJC implements EJCConstants {
    public static void main(String[] args) throws ParseException, TokenMgrError{
        EJC EJC = new EJC(System.in);
        try{
            EJC.start();
            System.out.println("Sucesso!");
        }catch (Exception e) {
            System.out.println("Erro!\u005cn" + e.toString());
        }
    }

  static final public void start() throws ParseException {
        Token t;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
      case PLUS:
      case MINUS:
      case DIV:
      case MUL:
      case OR:
      case AND:
      case NOT:
      case GT:
      case LT:
      case GTE:
      case LTE:
      case EQUAL:
      case DIFF:
      case LPAR:
      case RPAR:
      case SEMICOLON:
      case COMMA:
      case LSQ_BRACK:
      case RSQ_BRACK:
      case DOT:
      case ARRAY:
      case BEGIN:
      case CALL:
      case DO:
      case ELSE:
      case END:
      case ENDIF:
      case ENDUNTIL:
      case ENDWHILE:
      case FUNCTION:
      case IF:
      case INTEGER:
      case PARAMETERS:
      case PROCEDURE:
      case PROGRAM:
      case READ:
      case REAL:
      case RECORD:
      case RETURN:
      case RETURNS:
      case SET:
      case STRING:
      case THEN:
      case TYPES:
      case UNTIL:
      case VAR:
      case VARIABLES:
      case WHILE:
      case WRITE:
      case NUMERIC_LITERAL:
      case IDENTIFIER:
      case STRING_LITERAL:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
        t = jj_consume_token(EOL);
                           System.out.printf("@(%d,%d)\u005ct<EOL>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case PLUS:
        t = jj_consume_token(PLUS);
                              System.out.printf("@(%d,%d)\u005ct<PLUS>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
                              System.out.printf("@(%d,%d)\u005ct<MINUS>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case DIV:
        t = jj_consume_token(DIV);
                            System.out.printf("@(%d,%d)\u005ct<DIV>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case MUL:
        t = jj_consume_token(MUL);
                            System.out.printf("@(%d,%d)\u005ct<MUL>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case OR:
        t = jj_consume_token(OR);
                           System.out.printf("@(%d,%d)\u005ct<OR>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case AND:
        t = jj_consume_token(AND);
                            System.out.printf("@(%d,%d)\u005ct<AND>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case NOT:
        t = jj_consume_token(NOT);
                            System.out.printf("@(%d,%d)\u005ct<NOT>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case GT:
        t = jj_consume_token(GT);
                          System.out.printf("@(%d,%d)\u005ct<GT>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case LT:
        t = jj_consume_token(LT);
                          System.out.printf("@(%d,%d)\u005ct<LT>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case GTE:
        t = jj_consume_token(GTE);
                           System.out.printf("@(%d,%d)\u005ct<GTE>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case LTE:
        t = jj_consume_token(LTE);
                           System.out.printf("@(%d,%d)\u005ct<LTE>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case EQUAL:
        t = jj_consume_token(EQUAL);
                             System.out.printf("@(%d,%d)\u005ct<EQUAL>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case DIFF:
        t = jj_consume_token(DIFF);
                            System.out.printf("@(%d,%d)\u005ct<DIFF>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case LPAR:
        t = jj_consume_token(LPAR);
                            System.out.printf("@(%d,%d)\u005ct<LPAR>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case RPAR:
        t = jj_consume_token(RPAR);
                            System.out.printf("@(%d,%d)\u005ct<RPAR>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case SEMICOLON:
        t = jj_consume_token(SEMICOLON);
                                 System.out.printf("@(%d,%d)\u005ct<SEMICOLON>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case COMMA:
        t = jj_consume_token(COMMA);
                             System.out.printf("@(%d,%d)\u005ct<COMMA>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case LSQ_BRACK:
        //	t = <QUOT> {System.out.printf("@(%d,%d)\t<QUOT>\t-\t%s\n", t.beginLine, t.beginColumn, t);} | 
                        t = jj_consume_token(LSQ_BRACK);
                                 System.out.printf("@(%d,%d)\u005ct<LSQ_BRACK>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case RSQ_BRACK:
        t = jj_consume_token(RSQ_BRACK);
                                 System.out.printf("@(%d,%d)\u005ct<RSQ_BRACK>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case DOT:
        t = jj_consume_token(DOT);
                           System.out.printf("@(%d,%d)\u005ct<DOT>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case ARRAY:
        t = jj_consume_token(ARRAY);
                              System.out.printf("@(%d,%d)\u005ct<ARRAY>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case BEGIN:
        t = jj_consume_token(BEGIN);
                              System.out.printf("@(%d,%d)\u005ct<BEGIN>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case CALL:
        t = jj_consume_token(CALL);
                             System.out.printf("@(%d,%d)\u005ct<CALL>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case DO:
        t = jj_consume_token(DO);
                           System.out.printf("@(%d,%d)\u005ct<DO>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case ELSE:
        t = jj_consume_token(ELSE);
                             System.out.printf("@(%d,%d)\u005ct<ELSE>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case END:
        t = jj_consume_token(END);
                            System.out.printf("@(%d,%d)\u005ct<END>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case ENDIF:
        t = jj_consume_token(ENDIF);
                              System.out.printf("@(%d,%d)\u005ct<ENDIF>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case ENDUNTIL:
        t = jj_consume_token(ENDUNTIL);
                                 System.out.printf("@(%d,%d)\u005ct<ENDUNTIL>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case ENDWHILE:
        t = jj_consume_token(ENDWHILE);
                                 System.out.printf("@(%d,%d)\u005ct<ENDWHILE>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case FUNCTION:
        t = jj_consume_token(FUNCTION);
                                 System.out.printf("@(%d,%d)\u005ct<FUNCTION>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case IF:
        t = jj_consume_token(IF);
                           System.out.printf("@(%d,%d)\u005ct<IF>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case INTEGER:
        t = jj_consume_token(INTEGER);
                                System.out.printf("@(%d,%d)\u005ct<INTEGER>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case PARAMETERS:
        t = jj_consume_token(PARAMETERS);
                                   System.out.printf("@(%d,%d)\u005ct<PARAMETERS>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case PROCEDURE:
        t = jj_consume_token(PROCEDURE);
                                  System.out.printf("@(%d,%d)\u005ct<PROCEDURE>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case PROGRAM:
        t = jj_consume_token(PROGRAM);
                                System.out.printf("@(%d,%d)\u005ct<PROGRAM>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case READ:
        t = jj_consume_token(READ);
                             System.out.printf("@(%d,%d)\u005ct<READ>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case REAL:
        t = jj_consume_token(REAL);
                             System.out.printf("@(%d,%d)\u005ct<REAL>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case RECORD:
        t = jj_consume_token(RECORD);
                               System.out.printf("@(%d,%d)\u005ct<RECORD>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case RETURN:
        t = jj_consume_token(RETURN);
                               System.out.printf("@(%d,%d)\u005ct<RETURN>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case RETURNS:
        t = jj_consume_token(RETURNS);
                                System.out.printf("@(%d,%d)\u005ct<RETURNS>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case SET:
        t = jj_consume_token(SET);
                            System.out.printf("@(%d,%d)\u005ct<SET>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case STRING:
        t = jj_consume_token(STRING);
                               System.out.printf("@(%d,%d)\u005ct<STRING>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case THEN:
        t = jj_consume_token(THEN);
                             System.out.printf("@(%d,%d)\u005ct<THEN>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case TYPES:
        t = jj_consume_token(TYPES);
                              System.out.printf("@(%d,%d)\u005ct<TYPES>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case UNTIL:
        t = jj_consume_token(UNTIL);
                              System.out.printf("@(%d,%d)\u005ct<UNTIL>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case VAR:
        t = jj_consume_token(VAR);
                            System.out.printf("@(%d,%d)\u005ct<VAR>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case VARIABLES:
        t = jj_consume_token(VARIABLES);
                                  System.out.printf("@(%d,%d)\u005ct<VARIABLES>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case WHILE:
        t = jj_consume_token(WHILE);
                              System.out.printf("@(%d,%d)\u005ct<WHILE>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case WRITE:
        t = jj_consume_token(WRITE);
                              System.out.printf("@(%d,%d)\u005ct<WRITE>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
                                  System.out.printf("@(%d,%d)\u005ct<ID>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case NUMERIC_LITERAL:
        t = jj_consume_token(NUMERIC_LITERAL);
                                       System.out.printf("@(%d,%d)\u005ct<NUM>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      case STRING_LITERAL:
        t = jj_consume_token(STRING_LITERAL);
                                      System.out.printf("@(%d,%d)\u005ct<STRING>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    t = jj_consume_token(0);
            System.out.printf("@(%d,%d)\u005ct<EOF>\u005ct-\u005ct%s\u005cn", t.beginLine, t.beginColumn, t);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public EJCTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xffdfff80,0xffdfff80,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x83ffffff,0x83ffffff,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0xa,0xa,};
   }

  /** Constructor with InputStream. */
  public EJC(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public EJC(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new EJCTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public EJC(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new EJCTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public EJC(EJCTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(EJCTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[68];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 68; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
